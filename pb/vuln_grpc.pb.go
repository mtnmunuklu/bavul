// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VulnServiceClient is the client API for VulnService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VulnServiceClient interface {
	AddCVE(ctx context.Context, in *AddCVERequest, opts ...grpc.CallOption) (*CVE, error)
	SearchCVE(ctx context.Context, in *SearchCVERequest, opts ...grpc.CallOption) (VulnService_SearchCVEClient, error)
	GetAllCVEs(ctx context.Context, in *GetAllCVEsRequest, opts ...grpc.CallOption) (VulnService_GetAllCVEsClient, error)
	DeleteCVE(ctx context.Context, in *DeleteCVERequest, opts ...grpc.CallOption) (*DeleteCVEResponse, error)
	UpdateCVE(ctx context.Context, in *UpdateCVERequest, opts ...grpc.CallOption) (*CVE, error)
	FetchNVDFeeds(ctx context.Context, in *FetchNVDFeedsRequest, opts ...grpc.CallOption) (VulnService_FetchNVDFeedsClient, error)
}

type vulnServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVulnServiceClient(cc grpc.ClientConnInterface) VulnServiceClient {
	return &vulnServiceClient{cc}
}

func (c *vulnServiceClient) AddCVE(ctx context.Context, in *AddCVERequest, opts ...grpc.CallOption) (*CVE, error) {
	out := new(CVE)
	err := c.cc.Invoke(ctx, "/messages.VulnService/AddCVE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vulnServiceClient) SearchCVE(ctx context.Context, in *SearchCVERequest, opts ...grpc.CallOption) (VulnService_SearchCVEClient, error) {
	stream, err := c.cc.NewStream(ctx, &VulnService_ServiceDesc.Streams[0], "/messages.VulnService/SearchCVE", opts...)
	if err != nil {
		return nil, err
	}
	x := &vulnServiceSearchCVEClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VulnService_SearchCVEClient interface {
	Recv() (*CVE, error)
	grpc.ClientStream
}

type vulnServiceSearchCVEClient struct {
	grpc.ClientStream
}

func (x *vulnServiceSearchCVEClient) Recv() (*CVE, error) {
	m := new(CVE)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vulnServiceClient) GetAllCVEs(ctx context.Context, in *GetAllCVEsRequest, opts ...grpc.CallOption) (VulnService_GetAllCVEsClient, error) {
	stream, err := c.cc.NewStream(ctx, &VulnService_ServiceDesc.Streams[1], "/messages.VulnService/GetAllCVEs", opts...)
	if err != nil {
		return nil, err
	}
	x := &vulnServiceGetAllCVEsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VulnService_GetAllCVEsClient interface {
	Recv() (*CVE, error)
	grpc.ClientStream
}

type vulnServiceGetAllCVEsClient struct {
	grpc.ClientStream
}

func (x *vulnServiceGetAllCVEsClient) Recv() (*CVE, error) {
	m := new(CVE)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vulnServiceClient) DeleteCVE(ctx context.Context, in *DeleteCVERequest, opts ...grpc.CallOption) (*DeleteCVEResponse, error) {
	out := new(DeleteCVEResponse)
	err := c.cc.Invoke(ctx, "/messages.VulnService/DeleteCVE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vulnServiceClient) UpdateCVE(ctx context.Context, in *UpdateCVERequest, opts ...grpc.CallOption) (*CVE, error) {
	out := new(CVE)
	err := c.cc.Invoke(ctx, "/messages.VulnService/UpdateCVE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vulnServiceClient) FetchNVDFeeds(ctx context.Context, in *FetchNVDFeedsRequest, opts ...grpc.CallOption) (VulnService_FetchNVDFeedsClient, error) {
	stream, err := c.cc.NewStream(ctx, &VulnService_ServiceDesc.Streams[2], "/messages.VulnService/FetchNVDFeeds", opts...)
	if err != nil {
		return nil, err
	}
	x := &vulnServiceFetchNVDFeedsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VulnService_FetchNVDFeedsClient interface {
	Recv() (*CVE, error)
	grpc.ClientStream
}

type vulnServiceFetchNVDFeedsClient struct {
	grpc.ClientStream
}

func (x *vulnServiceFetchNVDFeedsClient) Recv() (*CVE, error) {
	m := new(CVE)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VulnServiceServer is the server API for VulnService service.
// All implementations should embed UnimplementedVulnServiceServer
// for forward compatibility
type VulnServiceServer interface {
	AddCVE(context.Context, *AddCVERequest) (*CVE, error)
	SearchCVE(*SearchCVERequest, VulnService_SearchCVEServer) error
	GetAllCVEs(*GetAllCVEsRequest, VulnService_GetAllCVEsServer) error
	DeleteCVE(context.Context, *DeleteCVERequest) (*DeleteCVEResponse, error)
	UpdateCVE(context.Context, *UpdateCVERequest) (*CVE, error)
	FetchNVDFeeds(*FetchNVDFeedsRequest, VulnService_FetchNVDFeedsServer) error
}

// UnimplementedVulnServiceServer should be embedded to have forward compatible implementations.
type UnimplementedVulnServiceServer struct {
}

func (UnimplementedVulnServiceServer) AddCVE(context.Context, *AddCVERequest) (*CVE, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCVE not implemented")
}
func (UnimplementedVulnServiceServer) SearchCVE(*SearchCVERequest, VulnService_SearchCVEServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchCVE not implemented")
}
func (UnimplementedVulnServiceServer) GetAllCVEs(*GetAllCVEsRequest, VulnService_GetAllCVEsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllCVEs not implemented")
}
func (UnimplementedVulnServiceServer) DeleteCVE(context.Context, *DeleteCVERequest) (*DeleteCVEResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCVE not implemented")
}
func (UnimplementedVulnServiceServer) UpdateCVE(context.Context, *UpdateCVERequest) (*CVE, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCVE not implemented")
}
func (UnimplementedVulnServiceServer) FetchNVDFeeds(*FetchNVDFeedsRequest, VulnService_FetchNVDFeedsServer) error {
	return status.Errorf(codes.Unimplemented, "method FetchNVDFeeds not implemented")
}

// UnsafeVulnServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VulnServiceServer will
// result in compilation errors.
type UnsafeVulnServiceServer interface {
	mustEmbedUnimplementedVulnServiceServer()
}

func RegisterVulnServiceServer(s grpc.ServiceRegistrar, srv VulnServiceServer) {
	s.RegisterService(&VulnService_ServiceDesc, srv)
}

func _VulnService_AddCVE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCVERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VulnServiceServer).AddCVE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.VulnService/AddCVE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VulnServiceServer).AddCVE(ctx, req.(*AddCVERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VulnService_SearchCVE_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchCVERequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VulnServiceServer).SearchCVE(m, &vulnServiceSearchCVEServer{stream})
}

type VulnService_SearchCVEServer interface {
	Send(*CVE) error
	grpc.ServerStream
}

type vulnServiceSearchCVEServer struct {
	grpc.ServerStream
}

func (x *vulnServiceSearchCVEServer) Send(m *CVE) error {
	return x.ServerStream.SendMsg(m)
}

func _VulnService_GetAllCVEs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllCVEsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VulnServiceServer).GetAllCVEs(m, &vulnServiceGetAllCVEsServer{stream})
}

type VulnService_GetAllCVEsServer interface {
	Send(*CVE) error
	grpc.ServerStream
}

type vulnServiceGetAllCVEsServer struct {
	grpc.ServerStream
}

func (x *vulnServiceGetAllCVEsServer) Send(m *CVE) error {
	return x.ServerStream.SendMsg(m)
}

func _VulnService_DeleteCVE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCVERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VulnServiceServer).DeleteCVE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.VulnService/DeleteCVE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VulnServiceServer).DeleteCVE(ctx, req.(*DeleteCVERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VulnService_UpdateCVE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCVERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VulnServiceServer).UpdateCVE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.VulnService/UpdateCVE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VulnServiceServer).UpdateCVE(ctx, req.(*UpdateCVERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VulnService_FetchNVDFeeds_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchNVDFeedsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VulnServiceServer).FetchNVDFeeds(m, &vulnServiceFetchNVDFeedsServer{stream})
}

type VulnService_FetchNVDFeedsServer interface {
	Send(*CVE) error
	grpc.ServerStream
}

type vulnServiceFetchNVDFeedsServer struct {
	grpc.ServerStream
}

func (x *vulnServiceFetchNVDFeedsServer) Send(m *CVE) error {
	return x.ServerStream.SendMsg(m)
}

// VulnService_ServiceDesc is the grpc.ServiceDesc for VulnService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VulnService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "messages.VulnService",
	HandlerType: (*VulnServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCVE",
			Handler:    _VulnService_AddCVE_Handler,
		},
		{
			MethodName: "DeleteCVE",
			Handler:    _VulnService_DeleteCVE_Handler,
		},
		{
			MethodName: "UpdateCVE",
			Handler:    _VulnService_UpdateCVE_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SearchCVE",
			Handler:       _VulnService_SearchCVE_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllCVEs",
			Handler:       _VulnService_GetAllCVEs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FetchNVDFeeds",
			Handler:       _VulnService_FetchNVDFeeds_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "vuln.proto",
}
