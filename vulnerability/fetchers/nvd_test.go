package fetchers_test

import (
	"testing"
	"time"

	"github.com/mtnmunuklu/bavul/vulnerability/fetchers"
	"github.com/mtnmunuklu/bavul/vulnerability/models"
	"github.com/mtnmunuklu/bavul/vulnerability/util"
	"github.com/stretchr/testify/assert"
)

// MockNVDClientWrapper implements the NVDClient interface for testing.
type MockNVDClientWrapper struct {
	FetchCVEDataFunc              func() (fetchers.NVDData, error)
	ConvertNvdDataToCVEFunc       func(nvdData fetchers.NVDData) []models.CVE
	FetchCVEDataFuncCalled        bool
	ConvertNvdDataToCVEFuncCalled bool
}

// FetchCVEData calls the mocked FetchCVEDataFunc.
func (m *MockNVDClientWrapper) FetchCVEData() (fetchers.NVDData, error) {
	m.FetchCVEDataFuncCalled = true
	if m.FetchCVEDataFunc != nil {
		return m.FetchCVEDataFunc()
	}
	return fetchers.NVDData{}, nil
}

// ConvertNvdDataToCVE calls the mocked ConvertNvdDataToCVE function.
func (m *MockNVDClientWrapper) ConvertNvdDataToCVE(nvdData fetchers.NVDData) []models.CVE {
	m.ConvertNvdDataToCVEFuncCalled = true
	if m.ConvertNvdDataToCVEFunc != nil {
		return m.ConvertNvdDataToCVEFunc(nvdData)
	}
	return nil
}

func TestFetchCVEData(t *testing.T) {
	mockClientWrapper := &MockNVDClientWrapper{}
	nvdFetcher := fetchers.NewNVDFetcher()
	nvdFetcher.SetNVDKey("mock-api-key")
	nvdFetcher.SetNVDClient(mockClientWrapper)

	// Mock the FetchCVEData function in the mock client wrapper.
	mockClientWrapper.FetchCVEDataFunc = func() (fetchers.NVDData, error) {
		// Mock the FetchCVEData function here
		// You can return any data you want for testing purposes
		return fetchers.NVDData{
			StartIndex:        0,
			TotalResultsCount: 1,
			CVEItems: []fetchers.NVDCve{
				{
					// ... mock data ...
				},
			},
		}, nil
	}

	// Call the method to be tested.
	result, err := nvdFetcher.FetchCVEData()

	// Assert that the result is not nil and contains the expected CVE data.
	assert.NotNil(t, result)
	assert.NoError(t, err)

	// Assert that the FetchCVEDataFunc in the mock client wrapper is called.
	assert.True(t, mockClientWrapper.FetchCVEDataFuncCalled)
}

func TestConvertNvdDataToCVE(t *testing.T) {
	mockClientWrapper := &MockNVDClientWrapper{}
	nvdFetcher := fetchers.NewNVDFetcher()
	nvdFetcher.SetNVDKey("mock-api-key")
	nvdFetcher.SetNVDClient(mockClientWrapper)

	// Mocking an NVDData for testing purposes.
	// This can be replaced with more meaningful data depending on the actual use case.
	nvdData := fetchers.NVDData{
		StartIndex:        0,
		TotalResultsCount: 1,
		CVEItems: []fetchers.NVDCve{
			{
				// ... mock data ...
			},
		},
	}

	// Mock the ConvertNvdDataToCVE function in the mock client wrapper.
	mockClientWrapper.ConvertNvdDataToCVEFunc = func(nvdData fetchers.NVDData) []models.CVE {
		// Mock the ConvertNvdDataToCVE function here
		// You can return any data you want for testing purposes
		return []models.CVE{
			{
				// ... mock data ...
			},
		}
	}

	// Call the method to be tested.
	result := nvdFetcher.ConvertNvdDataToCVE(nvdData)

	// Assert that the result is not nil and contains the expected CVE data.
	assert.NotNil(t, result)
	assert.Len(t, result, 1)

	// Assert that the ConvertNvdDataToCVEFunc in the mock client wrapper is called.
	assert.True(t, mockClientWrapper.ConvertNvdDataToCVEFuncCalled)
}

func TestParseTime(t *testing.T) {
	// Test a valid RFC3339 time.
	t.Run("TestValidTime", func(t *testing.T) {
		dateStr := "2023-09-24T12:34:56.000"
		tm := util.ParseTime(dateStr)
		expected := time.Date(2023, time.September, 24, 12, 34, 56, 0, time.UTC)

		// Check if the difference between tm and expected is within a tolerance.
		tolerance := time.Second
		diff := tm.Sub(expected)
		if diff < -tolerance || diff > tolerance {
			t.Errorf("Expected: %v, Got: %v", expected, tm)
		}
	})

	// Test an invalid RFC3339 time.
	t.Run("TestInvalidTime", func(t *testing.T) {
		dateStr := "invalid-time"
		tm := util.ParseTime(dateStr)
		if !tm.IsZero() {
			t.Errorf("Expected: Zero time, Got: %v", tm)
		}
	})

	// Test a valid RFC3339 time with milliseconds.
	t.Run("TestValidTimeWithMilliseconds", func(t *testing.T) {
		dateStr := "2023-09-24T12:34:56.123"
		tm := util.ParseTime(dateStr)
		expected := time.Date(2023, time.September, 24, 12, 34, 56, 123000000, time.UTC)

		// Check if the difference between tm and expected is within a tolerance.
		tolerance := time.Millisecond
		diff := tm.Sub(expected)
		if diff < -tolerance || diff > tolerance {
			t.Errorf("Expected: %v, Got: %v", expected, tm)
		}
	})
}

func TestNVDFetcherReal(t *testing.T) {
	// Create an instance of NVDFetcher for testing.
	fetcher := fetchers.NewNVDFetcher()

	// Test the FetchCVEData and ConvertNvdDataToCVE function.
	t.Run("TestNVDFetcherReal", func(t *testing.T) {
		data, err := fetcher.FetchCVEData()
		if err != nil {
			t.Errorf("Error: %v", err)
		}
		cves := fetcher.ConvertNvdDataToCVE(data)
		if len(cves) == 0 {
			t.Errorf("Error: CVE data not converted")
		}
	})

	// You can test other functions here.
}
