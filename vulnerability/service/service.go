package service

import (
	"context"
	"time"

	"github.com/mtnmunuklu/bavul/pb"
	"github.com/mtnmunuklu/bavul/vulnerability/models"
	"github.com/mtnmunuklu/bavul/vulnerability/repository"
	"github.com/mtnmunuklu/bavul/vulnerability/util"
	"gopkg.in/mgo.v2"
	"gopkg.in/mgo.v2/bson"
)

type VulnService struct {
	cveRepository repository.CVERepository
}

func NewVulnService(cveRepository repository.CVERepository) pb.VulnServiceServer {
	return &VulnService{cveRepository: cveRepository}
}

func (s *VulnService) AddCVE(ctx context.Context, req *pb.AddCVERequest) (*pb.CVE, error) {
	cveId, err := util.ValidateCVEId(req.GetCveId())
	if err != nil {
		return nil, err
	}

	found, err := s.cveRepository.GetByCVEId(cveId)
	if err == mgo.ErrNotFound {
		cve := new(models.CVE)
		cve.Id = bson.NewObjectId()
		cve.CveId = cveId
		cve.Description = req.GetDescription()
		cve.Links = req.GetLinks()
		cve.Product = req.GetProduct()
		cve.Vendor = req.GetVendor()
		// TODO: Check severity format
		cve.Severity = req.GetSeverity()
		// TODO: Check uniq time format for published and modified date of cve.
		cve.Published = time.Unix(req.GetPublished(), 0)
		cve.Modified = time.Unix(req.GetModified(), 0)
	}

	if found == nil {
		return nil, util.ErrNotPerformedOperation
	}

	return nil, util.ErrExistCVE
}

func (s *VulnService) GetCVE(ctx context.Context, req *pb.GetCVERequest) (*pb.CVE, error) {
	cveId, err := util.ValidateCVEId(req.GetCveId())
	if err != nil {
		return nil, err
	}

	cve, err := s.cveRepository.GetByCVEId(cveId)
	if err != nil {
		return nil, util.ErrNotFoundCVE
	}

	return cve.ToProto(), nil
}

func (s *VulnService) GetAllCVEs(req *pb.GetAllCVEsRequest, stream pb.VulnService_GetAllCVEsServer) error {
	cves, err := s.cveRepository.GetAll()
	if err != nil {
		return util.ErrNotPerformedOperation
	}

	for _, cve := range cves {
		err := stream.Send(cve.ToProto())
		if err != nil {
			return util.ErrNotPerformedOperation
		}
	}

	return nil
}

func (s *VulnService) DeleteCVE(ctx context.Context, req *pb.DeleteCVERequest) (*pb.DeleteCVEResponse, error) {
	cveId, err := util.ValidateCVEId(req.GetCveId())
	if err != nil {
		return nil, err
	}

	cve, err := s.cveRepository.GetByCVEId(cveId)
	if err != nil {
		return nil, util.ErrNotFoundCVE
	}

	err = s.cveRepository.DeleteById(cve.Id.Hex())
	if err != nil {
		return nil, util.ErrDeleteCVE
	}

	return &pb.DeleteCVEResponse{CveId: cve.CveId}, nil
}

// TODO: Add UpdateCVE function
