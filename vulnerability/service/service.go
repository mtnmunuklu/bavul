package service

import (
	"context"

	"github.com/mtnmunuklu/bavul/pb"
	"github.com/mtnmunuklu/bavul/vulnerability/fetchers"
	"github.com/mtnmunuklu/bavul/vulnerability/models"
	"github.com/mtnmunuklu/bavul/vulnerability/repository"
	"github.com/mtnmunuklu/bavul/vulnerability/util"
	"gopkg.in/mgo.v2"
	"gopkg.in/mgo.v2/bson"
)

type VulnService struct {
	cveRepository repository.CVERepository
}

func NewVulnService(cveRepository repository.CVERepository) pb.VulnServiceServer {
	return &VulnService{cveRepository: cveRepository}
}

func (s *VulnService) AddCVE(ctx context.Context, req *pb.AddCVERequest) (*pb.CVE, error) {
	cveId, err := util.ValidateCVEId(req.GetCveId())
	if err != nil {
		return nil, err
	}

	found, err := s.cveRepository.GetByCVEId(cveId)
	if err == mgo.ErrNotFound {
		cve := new(models.CVE)
		cve.Id = bson.NewObjectId()
		cve.CveId = cveId
		cve.Description = req.GetDescription()
		cve.Links = req.GetLinks()
		cve.Product = req.GetProduct()
		cve.Vendor = req.GetVendor()
		// TODO: Check severity format
		cve.Severity = req.GetSeverity()
		cve.Published = util.ParseTime(req.GetPublished())
		cve.Modified = util.ParseTime(req.GetModified())
		err := s.cveRepository.Save(cve)
		if err != nil {
			return nil, util.ErrAddCVE
		}
		return cve.ToProto(), nil
	}

	if found == nil {
		return nil, util.ErrNotPerformedOperation
	}

	return nil, util.ErrExistCVE
}

func (s *VulnService) GetAllCVEs(req *pb.GetAllCVEsRequest, stream pb.VulnService_GetAllCVEsServer) error {
	cves, err := s.cveRepository.GetAll()
	if err != nil {
		return util.ErrNotPerformedOperation
	}

	for _, cve := range cves {
		err := stream.Send(cve.ToProto())
		if err != nil {
			return util.ErrNotPerformedOperation
		}
	}

	return nil
}

func (s *VulnService) DeleteCVE(ctx context.Context, req *pb.DeleteCVERequest) (*pb.DeleteCVEResponse, error) {
	cveId, err := util.ValidateCVEId(req.GetCveId())
	if err != nil {
		return nil, err
	}

	cve, err := s.cveRepository.GetByCVEId(cveId)
	if err != nil {
		return nil, util.ErrNotFoundCVE
	}

	err = s.cveRepository.DeleteById(cve.Id.Hex())
	if err != nil {
		return nil, util.ErrDeleteCVE
	}

	return &pb.DeleteCVEResponse{CveId: cve.CveId}, nil
}

func (s *VulnService) UpdateCVE(ctx context.Context, req *pb.UpdateCVERequest) (*pb.CVE, error) {
	cveId, err := util.ValidateCVEId(req.GetCveId())
	if err != nil {
		return nil, err
	}

	cve, err := s.cveRepository.GetByCVEId(cveId)
	if err == mgo.ErrNotFound {
		return nil, util.ErrNotFoundCVE
	}

	if cve == nil {
		return nil, util.ErrNotPerformedOperation
	}

	if req.GetDescription() != "" {
		cve.Description = req.GetDescription()
	}
	if req.GetLinks() != nil {
		cve.Links = req.GetLinks()
	}
	if req.GetProduct() != "" {
		cve.Product = req.GetProduct()
	}
	if req.GetVendor() != "" {
		cve.Vendor = req.GetVendor()
	}
	// TODO: Check severity format
	if req.GetSeverity() != "" {
		cve.Severity = req.GetSeverity()
	}
	if req.GetPublished() != "" {
		cve.Published = util.ParseTime(req.GetPublished())
	}
	if req.GetModified() != "" {
		cve.Modified = util.ParseTime(req.GetModified())
	}
	err = s.cveRepository.Update(cve)
	if err != nil {
		return nil, util.ErrUpdateCVE
	}

	return cve.ToProto(), nil
}

func (s *VulnService) FetchNVDFeeds(req *pb.FetchNVDFeedsRequest, stream pb.VulnService_FetchNVDFeedsServer) error {
	fetcher := fetchers.NewNVDFetcher()
	fetcher.SetNVDKey(req.GetApiKey())
	data, err := fetcher.FetchCVEData()
	if err != nil {
		return util.ErrNotPerformedOperation
	}

	cves := fetcher.ConvertNvdDataToCVE(data)
	for _, cve := range cves {
		found, err := s.cveRepository.GetByCVEId(cve.CveId)
		if err == mgo.ErrNotFound {
			err := s.cveRepository.Save(&cve)
			if err != nil {
				return util.ErrAddCVE
			}
			err = stream.Send(cve.ToProto())
			if err != nil {
				return util.ErrNotPerformedOperation
			}
		}
		if found == nil {
			return util.ErrNotPerformedOperation
		}
	}
	return nil
}

func (s *VulnService) SearchCVE(req *pb.SearchCVERequest, stream pb.VulnService_SearchCVEServer) error {
	cves, err := s.cveRepository.SearchCVEs(req.GetCveId(), req.GetSeverity(), req.GetProduct(), req.GetVendor(), req.GetStartDate(), req.GetEndDate())
	if err != nil {
		return util.ErrNotPerformedOperation
	}

	for _, cve := range cves {
		err := stream.Send(cve.ToProto())
		if err != nil {
			return util.ErrNotPerformedOperation
		}
	}

	return nil
}
