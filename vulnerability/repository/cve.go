package repository

import (
	"github.com/mtnmunuklu/bavul/db"
	"github.com/mtnmunuklu/bavul/vulnerability/models"
	"github.com/mtnmunuklu/bavul/vulnerability/util"
	"gopkg.in/mgo.v2"
	"gopkg.in/mgo.v2/bson"
)

const CVECollection = "cves"

// CVERepository is the interface of the vulnerability backend.
type CVERepository interface {
	Save(cve *models.CVE) error
	GetById(id string) (cve *models.CVE, err error)
	GetByCVEId(cveId string) (cve *models.CVE, err error)
	SearchCVEs(cveId, severity, product, vendor, startDate, endDate string) (cves []*models.CVE, err error)
	GetAll() (cves []*models.CVE, err error)
	Update(cve *models.CVE) error
	DeleteById(id string) error
}

// cveRepository provides a mongo collection for vulnerability job.
type cveRepository struct {
	c *mgo.Collection
}

// NewCVERepository creates a new CVERepository instance.
func NewCVERepository(conn db.Connection) CVERepository {
	return &cveRepository{c: conn.DB().C(CVECollection)}
}

// Save creates a cve.
func (r *cveRepository) Save(cve *models.CVE) error {
	return r.c.Insert(cve)
}

// GetById returns the cve based on id.
func (r *cveRepository) GetById(id string) (cve *models.CVE, err error) {
	err = r.c.FindId(bson.ObjectIdHex(id)).One(&cve)
	return cve, err
}

// GetByCVEId returns the cve based on cve id.
func (r *cveRepository) GetByCVEId(cveId string) (cve *models.CVE, err error) {
	err = r.c.Find(bson.M{"cve_id": cveId}).One(&cve)
	return cve, err
}

// GetAll returns all cves.
func (r *cveRepository) GetAll() (cves []*models.CVE, err error) {
	err = r.c.Find(bson.M{}).All(&cves)
	return cves, err
}

// Update updates the cve.
func (r *cveRepository) Update(cve *models.CVE) error {
	return r.c.UpdateId(cve.Id, cve)
}

// Delete deletes the cve based on id.
func (r *cveRepository) DeleteById(id string) error {
	return r.c.RemoveId(bson.ObjectIdHex(id))
}

// DeleteAll drops cves collection.
func (r *cveRepository) DeleteAll() error {
	return r.c.DropCollection()
}

func (r *cveRepository) SearchCVEs(cveId, severity, product, vendor, startDate, endDate string) (cves []*models.CVE, err error) {
	// Create criteria for the database
	filter := bson.M{}

	// Apply severity filter if provided
	if cveId != "" {
		validatedCVEId, err := util.ValidateCVEId(cveId)
		if err != nil {
			return nil, err
		}
		filter["cve_id"] = validatedCVEId
	}

	// Apply severity filter if provided
	if severity != "" {
		checkedSeverity, err := util.CheckSeverity(severity)
		if err != nil {
			return nil, err
		}
		filter["severity"] = checkedSeverity
	}

	// Apply product filter if provided
	if product != "" {
		// Use regex to perform substring matching
		filter["product"] = bson.M{"$regex": bson.RegEx{Pattern: product, Options: "i"}}
	}

	// Apply vendor filter if provided
	if vendor != "" {
		// Use regex to perform substring matching
		filter["vendor"] = bson.M{"$regex": bson.RegEx{Pattern: vendor, Options: "i"}}
	}

	// Apply date range filters if provided
	if startDate != "" {
		filter["published"] = bson.M{"$gte": startDate}
	}

	if endDate != "" {
		filter["published"] = bson.M{"$lte": endDate}
	}

	err = r.c.Find(filter).All(&cves)
	return cves, err
}
